format_version: 3
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git

app:
  envs:
  - BITRISE_STEP_ID: script-runner
  - BITRISE_STEP_VERSION: "0.9.1"
  - BITRISE_STEP_GIT_CLONE_URL: https://github.com/bitrise-steplib/steps-script-runner.git
  - MY_STEPLIB_REPO_FORK_GIT_URL: $MY_STEPLIB_REPO_FORK_GIT_URL
  - IS_DEBUG: "yes"

workflows:
  test:
    before_run:
    - go-tests
    steps:
    - change-workdir:
        title: Switch working dir to test / _tmp dir
        description: |-
          To prevent step testing issues, like referencing relative
          files with just './some-file' in the step's code, which would
          work for testing the step from this directory directly
          but would break if the step is included in another `bitrise.yml`.
        run_if: true
        inputs:
        - path: ./_tmp
        - is_create_path: true
    - script:
        title: Create int_test.sh file
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            echo "echo 'This is a Bash integration test'" > int_test.sh
        - is_debug: false
    - path::./:
        title: Test Bash
        description: |-
          Test running a Bash script
        run_if: true
        inputs:
        - file_path: "int_test.sh"
        - working_dir: ./
        - is_debug: $IS_DEBUG
    - path::./:
        title: Test Bash in login shell
        description: |-
          Test running a Bash script
        run_if: true
        inputs:
        - file_path: "int_test.sh"
        - working_dir: ./
        - is_debug: $IS_DEBUG
        - runner: "/bin/bash -l"
    - path::./:
        title: Test Zsh
        description: |-
          Test running a Bash script
        run_if: true
        inputs:
        - file_path: "int_test.sh"
        - working_dir: ./
        - is_debug: $IS_DEBUG
        - runner: "/bin/zsh"
    - script:
        title: Create int_test_failing.sh file
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            echo "exit 222" > int_test_failing.sh
        - is_debug: false
    - path::./:
        title: Test Bash failure
        description: |-
          Test running a failing Bash script
        is_skippable: true
        run_if: true
        inputs:
        - file_path: "int_test_failing.sh"
        - working_dir: ./
        - is_debug: $IS_DEBUG
    - script:
        title: Create int_test.rb file
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            echo "puts \"This is a Ruby integration test\"" > int_test.rb
    - path::./:
        title: Test Ruby
        description: |-
          Test running a Ruby script
        inputs:
        - file_path: "int_test.rb"
        - working_dir: ./
        - runner: "ruby"
        - is_debug: $IS_DEBUG
    - path::./:
        title: Test Ruby from env
        description: |-
          Test running a Ruby script
        inputs:
        - file_path: "int_test.rb"
        - working_dir: ./
        - runner: "/usr/bin/env ruby"
        - is_debug: $IS_DEBUG
    - script:
        title: Create int_script.go file
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            echo "package main

            import (
              \"fmt\"
            )

            func main() {
              fmt.Println(\"This is a Go integration test\")
            }" > int_script.go
    - path::./:
        title: Test Go
        description: |-
          Test running a Go script
        inputs:
        - file_path: "int_script.go"
        - working_dir: ./
        - runner: "go run"
        - is_debug: $IS_DEBUG

  go-tests:
    before_run:
    - _install-test-tools
    steps:
    - script:
        title: Export go files to test
        inputs:
        - content: |-
            #!/bin/bash
            set -ex

            no_vendor_paths="$(go list ./... | grep -v vendor)"
            envman add --key GOLIST_WITHOUT_VENDOR --value "$no_vendor_paths"
    - script:
        title: Err check
        inputs:
        - content: |-
            #!/bin/bash
            set -ex

            errcheck -asserts=true -blank=true $GOLIST_WITHOUT_VENDOR
    - script:
        title: Go lint
        inputs:
        - content: |-
            #!/bin/bash
            set -ex

            while read -r line; do
              echo "-> Linting: $line"
              golint_out="$(golint $line)"
              if [[ "${golint_out}" != "" ]] ; then
                echo "=> Golint issues found:"
                echo "${golint_out}"
                exit 1
              fi
            done <<< "$GOLIST_WITHOUT_VENDOR"
    - script:
        title: Go test
        inputs:
        - content: |-
            #!/bin/bash
            set -ex

            go test ./...

  _install-test-tools:
    steps:
    - script:
        title: Install required testing tools
        inputs:
        - content: |-
            #!/bin/bash
            set -ex

            # Check for unhandled errors
            go get -u -v github.com/kisielk/errcheck

            # Go lint
            go get -u -v github.com/golang/lint/golint


  godeps-update:
    title: Godeps update
    description: |
      Used for updating bitrise dependencies with godep
    steps:
    - script:
        title: Dependency update
        inputs:
        - content: |
            #!/bin/bash
            set -ex
            go get -u -v github.com/tools/godep

            rm -rf ./Godeps
            rm -rf ./vendor

            go get -t -d ./...
            godep save ./...

  # ----------------------------------------------------------------
  # --- workflows to Share this step into a Step Library
  audit-this-step:
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            stepman audit --step-yml ./step.yml

  share-this-step:
    envs:
      # if you want to share this step into a StepLib
      - MY_STEPLIB_REPO_FORK_GIT_URL: $MY_STEPLIB_REPO_FORK_GIT_URL
      - BITRISE_STEP_ID: $BITRISE_STEP_ID
      - BITRISE_STEP_VERSION: $BITRISE_STEP_VERSION
      - BITRISE_STEP_GIT_CLONE_URL: $BITRISE_STEP_GIT_CLONE_URL
    description: |-
      If this is the first time you try to share a Step you should
      first call: $ bitrise share

      This will print you a guide, and information about how Step sharing
      works. Please read it at least once!

      As noted in the Step sharing guide you'll have to fork the
      StepLib you want to share this step into. Once you're done with forking
      the repository you should set your own fork's git clone URL
      in the `.bitrise.secrets.yml` file, or here in the `envs` section,
      as the value of the `MY_STEPLIB_REPO_FORK_GIT_URL` environment.

      You're now ready to share this Step, just make sure that
      the `BITRISE_STEP_ID` and `BITRISE_STEP_VERSION`
      environments are set to the desired values!

      To share this Step into a StepLib you can just run: $ bitrise run share-this-step

      Once it finishes the only thing left is to actually create a Pull Request,
      the way described in the guide printed at the end of the process.
    before_run:
    - audit-this-step
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            bitrise share start -c "${MY_STEPLIB_REPO_FORK_GIT_URL}"
            bitrise share create --stepid "${BITRISE_STEP_ID}" --tag "${BITRISE_STEP_VERSION}" --git "${BITRISE_STEP_GIT_CLONE_URL}"
            bitrise share finish
